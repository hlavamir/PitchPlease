[TextureSource]
[Category("Source")]
[Summary("")]
shader GeneratorNoise_TextureFX : TextureFX
{
    [Default(0)]
    compose ComputeFloat Time;

    [Default(1)]
    compose ComputeFloat Scale;

    [Default(0)]
    compose ComputeFloat Offset;

    [Default(0)]
    compose ComputeFloat Brightness;

    [Default(0)]
    compose ComputeFloat Contrast;

    [Color]
    float4 Color = float4(1, 1, 1, 1);

    //	--------------------------------------------------------------------
    //	Optimized implementation of simplex noise.
    //	Based on stegu's simplex noise: https://github.com/stegu/webgl-noise.
    //	Contact : atyuwen@gmail.com
    //	Author : Yuwen Wu (https://atyuwen.github.io/)
    //	License : Distributed under the MIT License.
    //	--------------------------------------------------------------------

    uint pcg3d16(uint3 p)
    {
        //uint3 v = p * 1664525u + 1013904223u;
        uint3 v = p * (uint)1664525 + (uint)1013904223;
        v.x += v.y*v.z; 
        v.y += v.z*v.x; 
        v.z += v.x*v.y;
        v.x += v.y*v.z;
        return v.x;
    }

    // Get random gradient from hash value.
    float3 gradient3d(uint hash)
    {
        float3 g = float3(hash.xxx & uint3(0x80000, 0x40000, 0x20000));
        return g * float3(1.0 / 0x40000, 1.0 / 0x20000, 1.0 / 0x10000) - 1.0;
    }

    // 3D Simplex Noise. Approximately 71 instruction slots used.
    // Assume p is in the range [-32768, 32767].
    float SimplexNoise3D(float3 p)
    {
        const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);
        const float4 D = float4(0.0, 0.5, 1.0, 2.0);

        // First corner
        float3 i = floor(p + dot(p, C.yyy));
        float3 x0 = p - i + dot(i, C.xxx);

        // Other corners
        float3 g = step(x0.yzx, x0.xyz);
        float3 l = 1.0 - g;
        float3 i1 = min(g.xyz, l.zxy);
        float3 i2 = max(g.xyz, l.zxy);

        // x0 = x0 - 0.0 + 0.0 * C.xxx;
        // x1 = x0 - i1  + 1.0 * C.xxx;
        // x2 = x0 - i2  + 2.0 * C.xxx;
        // x3 = x0 - 1.0 + 3.0 * C.xxx;
        float3 x1 = x0 - i1 + C.xxx;
        float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
        float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

        i = i + 32768.5;
        uint hash0 = pcg3d16((uint3)i);
        uint hash1 = pcg3d16((uint3)(i + i1));
        uint hash2 = pcg3d16((uint3)(i + i2));
        uint hash3 = pcg3d16((uint3)(i + 1 ));

        float3 p0 = gradient3d(hash0);
        float3 p1 = gradient3d(hash1);
        float3 p2 = gradient3d(hash2);
        float3 p3 = gradient3d(hash3);

        // Mix final noise value.
        float4 m = saturate(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)));
        float4 mt = m * m;
        float4 m4 = mt * mt;
        return 62.6 * dot(m4, float4(dot(x0, p0), dot(x1, p1), dot(x2, p2), dot(x3, p3)));
    }

    stage override float4 Shading()
    {
        float2 uv = streams.TexCoord;

        float3 pos = float3(uv.x, uv.y + Offset.Compute(), Time.Compute());
        pos.xy *= Scale.Compute();

        float noise = SimplexNoise3D(pos);
        noise = (noise + 1) * 0.5;

        float remapMin = 0.5 * Contrast.Compute();
        float remapMax = 1 - remapMin;

        noise = saturate((noise + Brightness.Compute() - remapMin) / (remapMax - remapMin));

        return float4(noise, noise, noise, 1);
    }
};