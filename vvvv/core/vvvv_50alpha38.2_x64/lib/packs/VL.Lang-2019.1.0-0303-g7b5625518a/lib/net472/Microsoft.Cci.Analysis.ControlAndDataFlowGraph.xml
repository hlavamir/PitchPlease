<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.Analysis.ControlAndDataFlowGraph</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Cci.Analysis.ControlFlowInferencer`2.SetupControlFlow(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.ILocalScopeProvider)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.ControlGraphQueries`2">
            <summary>
            Presents information derived from a simple control flow graph. For example, traversal orders, predecessors, dominators and dominance frontiers.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlGraphQueries`2.#ctor(Microsoft.Cci.Analysis.ControlAndDataFlowGraph{`0,`1})">
            <summary>
            Presents information derived from a simple control flow graph. For example, traversal orders, predecessors, dominators and dominance frontiers.
            </summary>
            <param name="controlFlowGraph">The simple control flow graph from which to derive the information.</param>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlGraphQueries`2.BlocksInPostorder">
            <summary>
            Contains the same nodes as the AllBlocks property of the control flow graph, but in the order they will be visited by a depth first, post order traversal of successor nodes.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlGraphQueries`2.BlocksInPreorder">
            <summary>
            Contains the same nodes as the AllBlocks property of the control flow graph, but in the order they will be visited by a depth first, pre order traversal of successor nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlGraphQueries`2.DominanceFrontierFor(`0)">
            <summary>
            Returns zero or more nodes that are reachable from the given basic block, but are not dominated by the given basic block.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlGraphQueries`2.Dominates(`0,`0)">
            <summary>
            Returns true if the first block dominates the second block. That is, if all control paths from the applicable root node
            lead to the second block only via the first block.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlGraphQueries`2.ImmediateDominator(`0)">
            <summary>
            Returns the last block through which all control flows from a root must pass in order to reach the given block. 
            This block can be a root, however, it will not be the given block, except when the given block is a root.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlGraphQueries`2.PredeccessorsFor(`0)">
            <summary>
            All basic blocks from which control can flow to the given basic block.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.EnhancedBasicBlock`1">
            <summary>
            A basic block with additional fields to help compute things such as predecessor edges, dominance and dominance frontiers.
            </summary>
            <typeparam name="Instruction"></typeparam>
        </member>
        <member name="F:Microsoft.Cci.Analysis.EnhancedBasicBlock`1.firstDominanceFrontierNode">
            <summary>
            The first block in a list of blocks that are reachable from, but not dominated by this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.EnhancedBasicBlock`1.dominanceFrontierCount">
            <summary>
            The number of blocks that are reachable from, but not dominated by this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.EnhancedBasicBlock`1.firstPredecessorEdge">
            <summary>
            The first edge that enters this block. The edges are a contiguous sublist of the the PredeccessorEdges list of the ControlAndDataFlowGraph that contains this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.EnhancedBasicBlock`1.predeccessorCount">
            <summary>
            The number of edges that enter this block. The edges are a contiguous sublist of the the PredeccessorEdges list of the ControlAndDataFlowGraph that contains this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.EnhancedBasicBlock`1.immediateDominator">
            <summary>
            The block through which all control flows from a root must pass in order to reach this block. Can be a root. Will not be the block itself, except when the block is a root.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.EnhancedBasicBlock`1.postOrderNumber">
            <summary>
            The position of the node in a depth first, post order traversal of successor edges.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.DataFlowInferencer`2.SetupDataFlow(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.Analysis.ControlAndDataFlowGraph{`0,`1})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2">
            <summary>
            A set of basic blocks, each of which has a list of successor blocks and some other information.
            Each block consists of a list of instructions, each of which can point to previous instructions that compute the operands it consumes.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.MethodBody">
            <summary>
            The method body for which this instance is a Control and Data Flow Graph.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.RootBlocks">
            <summary>
            The first block in the method as well as the first blocks of any exception handlers, fault handlers and finally clauses.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.AllBlocks">
            <summary>
            A list of all basic blocks in the graph, ordered so that any block that ends on a conditional branch immediately precedes the block
            to which it falls through and so that all blocks that make up a try body or handler are contiguous.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.BlockFor">
            <summary>
            A map from IL offset to corresponding basic block.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.SuccessorEdges">
            <summary>
            The master list of all successor edges. The successor list for each basic block is a sublist of this list.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.SuccessorsFor(`0)">
            <summary>
            All basic blocks that can be reached via control flow out of the given basic block.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.StartPC">
            <summary>
            Returns the pc for the first block
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.Successors(Microsoft.Cci.Analysis.BlockPC)">
            <summary>
            Returns the successor BlockPCs from the given BlockPC, properly taking into account finally blocks
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.CurrentBlock(Microsoft.Cci.Analysis.BlockPC)">
            <summary>
            Return the Block corresponding to the offset on top of the execution stack
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.GetControlAndDataFlowGraphFor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.ILocalScopeProvider)">
            <summary>
            Constructs a control and data flow graph for the given method body.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.FinallyBlocksOnEdge(`0,`0)">
            <summary>
            Returns the finally blocks on this control flow edge in reverse execution order on a forward traversal.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.LocalOrParameter(Microsoft.Cci.Analysis.Instruction)">
            <summary>
            Given an instruction representing an address (byref), find the local or parameter it corresponds to or null
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.BasicBlock`1">
            <summary>
            A block of instructions of which only the first instruction can be reached via explicit control flow.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.firstSuccessorEdge">
            <summary>
            The first edge that leaves this block. The edges are a contiguous sublist of the the SuccessorEdges list of the ControlAndDataFlowGraph that contains this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.successorCount">
            <summary>
            The number of edges that leave this block. The edges are a contiguous sublist of the the SuccessorEdges list of the ControlAndDataFlowGraph that contains this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.OperandStack">
            <summary>
            A list of pseudo instructions that initialize the operand stack when the block is entered. No actual code should be generated for these instructions
            as the actual stack will be set up by the code transferring control to this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.Instructions">
            <summary>
            The instructions making up this block.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.BasicBlock`1.Offset">
            <summary>
            The IL offset of the first instruction in this basic block. If the block is empty, it is the same as the Offset of the following block. If there is no following block, 
            it is the offset where the next instruction would have appeared.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.Handlers">
            <summary>
            The enclosing handlers of this block in innermost to outermost order
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.ContainingHandler">
            <summary>
            If this block is physically inside a catch, fault, finally, or filter handler, then 
            ContainingHandler points to the closest enclosing such handler.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.BasicBlock`1.LocalDefs">
            <summary>
            Maps local variables at the beginning of the block to the corresponding defining instruction
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.BasicBlock`1.ParamDefs">
            <summary>
            Maps parameters at the beginning of the block to the corresponding defining instruction
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BasicBlock`1.CallConstraint(`0)">
            <summary>
            If this instruction is a constrained call virt, return the corresponding preceeding type constraint.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BasicBlock`1.ToString">
            <summary>
            Returns a string describing the basic block.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.Analysis.Instruction">
            <summary>
            A model of an IL operation, but with the implicit operand stack made explicit via the properties Operand1 and Operand2
            that point to the previous instructions that computed the operands, if any, that the instruction consumes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.Instruction.#ctor">
            <summary>
            A model of an IL operation, but with the implicit operand stack made explicit via the properties Operand1 and Operand2
            that point to the previous instructions that computed the operands, if any, that the instruction consumes.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.Instruction.Operation">
            <summary>
            The operation this instruction carries out.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.Instruction.Operand1">
            <summary>
            The instruction that results in the first operand of the operation, if an operand is required.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.Instruction.Operand2">
            <summary>
            The instruction that results in the second operand of the operation, if a second operand is required.
            Could also be an array of instructions if the instruction is n-ary for n > 2.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.Instruction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.Analysis.Instruction.Type">
            <summary>
            The type of the result this instruction pushes onto the stack. Void if none.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.Instruction.Aux">
            <summary>
            Extra dataflow information for Ldloc, Ldarg, Ldind. It contains the actual result value that was loaded
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.Instruction.PostLocalDefs">
            <summary>
            The local definitions after the instruction
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.Instruction.PostParamDefs">
            <summary>
            The parameter definitions after the instruction
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.Instruction.IsMergeNode">
            <summary>
            Return true if the instruction is a synthetic merge node (aka Phi node) at block entry
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.Instruction.Item(System.Object)">
            <summary>
            Returns the defining instruction of the local or parameter definition after this instruction or null
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.Instruction.InFlows">
            <summary>
            If the instruction is a merge node, then return all in-flowing defs
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.Analysis.BlockPC">
            <summary>
            A generalized program counter that contains the current block (and blocks to execute after that)
            
            Equality and hashing is based on content (the blocks) rather than the list pointers, so they are value equal
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BlockPC.Stack">
            <summary>
            List of blocks (identified by start instruction offset) that are form a stack of execution contexts
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BlockPC.#ctor(Microsoft.Cci.UtilityDataStructures.FList{System.UInt32})">
            <summary>
            Produce a block PC with the given control stack
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.BlockPC.Current">
            <summary>
            Return the block offset of the current block in the PC
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BlockPC.Replace(System.UInt32)">
            <summary>
            Produce a new BlockPC with the current block replaced by the given one. The rest of the stack is unchanged.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BlockPC.For``2(``0)">
            <summary>
            Produce a new BlockPC starting at the given Block.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BlockPC.Push``2(``0)">
            <summary>
            Push the given block on top of the BlockPC call stack
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BlockPC.Equals(Microsoft.Cci.Analysis.BlockPC)">
            <summary>
            Compare two BlockPCs for value equality
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BlockPC.GetHashCode">
            <summary>
            Return the hash code for this BlockPC
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BlockPC.ToString">
            <summary>
            Return a string representation of this BlockPC
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.HandlerInferencer`2">
            <summary>
            Infer protecting local handlers for each block.
            
            With that information we can then traverse finally and exception handler blocks in the proper order to infer data flow for locals and parameters
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.InitialParameterAssignment">
            <summary>
            Dummy instruction to give definition of initial parameter values
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.CallByRefAssignment">
            <summary>
            Dummy instruction to give definition of byref/out parameter values at a call
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.CallByRefAssignment.Parameter">
            <summary>
            The parameter assigned by this operation
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.CallByRefAssignment.Call">
            <summary>
            The original call instruction giving rise to this by-ref assignment
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.TypeInferencer`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.TypeInferencer`2.FillInTypes(Microsoft.Cci.IMetadataHost,Microsoft.Cci.Analysis.ControlAndDataFlowGraph{`0,`1})">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
