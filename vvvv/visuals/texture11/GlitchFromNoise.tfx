//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D noise;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{		
	
	float4 n = noise.Sample(linearSampler, float2(0.5, 0.5));
	
	float pos = n.r;
	float dst = n.g / 5;
	float intensity = (n.b - 0.5) * 0.05;
	
	/*float t = min(
		(input.uv.y - (pos - dst)) / (-dst),
		(input.uv.y - (pos + dst)) / (dst)
	);*/
	
	float t = 1 - (sqrt(pow(input.uv.y - pos, 2)) / dst);
	
	t = max(t, 0);
	t = smoothstep(0, 1, t);
	
	t *= intensity;
	
	float4 cr = texture2d.Sample(linearSampler, input.uv + float2(t, 0));
	float4 cg = texture2d.Sample(linearSampler, input.uv + float2(t * 0.25, 0));
	float4 cb = texture2d.Sample(linearSampler, input.uv + float2(t * -0.4, 0));
	
	float4 c = float4(cr.r, cg.g, cb.b, 1);
	
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



