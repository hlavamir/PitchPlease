//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
float2 offset;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float2 rotate(float2 pos, float rot){
	return float2(pos.x * cos(rot) - pos.y * sin(rot), pos.x * sin(rot) + pos.y * cos(rot));
}


float4 PS(psInput input) : SV_Target
{
	float2 p0 = input.uv - 0.5;
	p0.x = (p0.x / 9) * 16;
	
	float2 p1 = rotate(p0, 2.094395);
	float2 p2 = rotate(p1, 2.094395);
	
	p0.x = abs(p0.x);
	p1.x = abs(p1.x);
	p2.x = abs(p2.x);
	
	float2 p = lerp(p0, p1, step(0.577350 * p1.x, p1.y));
		   p = lerp(p,  p2, step(0.577350 * p2.x, p2.y));
	
	p *= 0.75;
	p += 0.5;
	
	float4 c = texture2d.Sample(linearSampler, p + offset);
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



