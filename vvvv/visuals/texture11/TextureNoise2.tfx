//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D texLF;
Texture2D noise;
Texture2D speed;
float reset = 0;
float decay = 0.98;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 cInit = texture2d.Sample(linearSampler, input.uv);
	
	float4 cNoise = noise.Sample(linearSampler, input.uv);
	
	float2 posOff = float2(cNoise.r, cNoise.g);	
	posOff = (posOff * 2) - 1;
	posOff *= pow(cNoise.b, 5);
	posOff *= 1.5;
	
	float4 cSpeed = speed.Sample(linearSampler, input.uv);
	float4 dir = (cSpeed * 2) - 1;
	//dir *= 0.33;
		
	
	float4 cNewR = texLF.Sample(linearSampler, input.uv + (posOff * dir.r * 0.75));
	float4 cNewG = texLF.Sample(linearSampler, input.uv + (posOff * dir.g * 0.37));
	float4 cNewB = texLF.Sample(linearSampler, input.uv + (posOff * dir.b * 1.50));
	
	float4 cNew = float4(cNewR.r, cNewG.g, cNewB.b, 1);
		
	float4 cLF = texLF.Sample(linearSampler, input.uv);
	cNew = max(cLF, cNew);
	
	cNew.rgb = max(cNew.rgb * decay, cInit.rgb);
	
	cNew = lerp(cNew, cInit, clamp(pow(cNoise.b, 8), 0, 0.001));
	
	float4 c = lerp(cNew, cInit, reset);
	
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



